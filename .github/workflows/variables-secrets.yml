name: Exploring variables and Secrets

#on:
#  push
#jobs:
#  docker:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Docker Build
#        run: docker build -t docker.io/dockerUsername/imageName:latest
#
#      - name: Docker Login
#        run: docker login --username=vadlamudirajesh --password=lkkdj@SsoWd
#
#      - name: Docker Publish
#        run: docker push docker.io/vadlamudirajesh/imageName:latest
#
#  deploy:
#    needs: docker
#    runs-on: ubuntu-latest
#    steps:
#      - name: Docker Run
#        run: docker run -d -p 8080:80 docker.io/dockerUsername/imageName:latest


#############environment variables at STEP level ########################

#  docker:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Docker Build
#        env:
#          CONTAINER_REGISTRY: docker.io
#          DOCKER_USERNAME:   vadlamudirajesh
#          IMAGE_NAME: github-actions-nginx
#        run: echo docker build -t $CONTAINER_REGISTRY/$DOCKER_USERNAME/IMAGE_NAME:latest
#
#      - name: Docker Login
#        env:
#          DOCKER_USERNAME:  vadlamudirajesh
#          DOCKER_PASSWORD: Nandini@9701
#        run: echo docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD
#
#      - name: Docker Publish
#        env:
#          DOCKER_REGISTRY:  docker.io
#          DOCKER_USERNAME:  vadlamudirajesh
#          IMAGE_NAME: github-actions-nginx
#        run: echo docker push ${{env.DOCKER_REGISTRY}}/${{env.DOCKER_USERNAME}}/${{env.IMAGE_NAME}}:latest
#
#  deploy:
#    needs: docker
#    runs-on: ubuntu-latest
#    steps:
#      - name: Docker Run
#        env:
#          CONTAINER_REGISTRY: docker.io
#          DOCKER_USERNAME:  vadlamudirajesh
#          IMAGE_NAME: github-action-nginx
#        run: docker run -d -p 8080:80 $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest


####################### environment variables at Job level ###############################
#
#  docker:
#    env:
#      CONTAINER_REGISTRY: docker.io
#      DOCKER_USERNAME: vadlamudirajesh
#      IMAGE_NAME: github-actions-nginx
#    runs-on: ubuntu-latest
#    steps:
#      - name: Docker Build
#        run: docker build -t $CONTAINER_REGISTRY/$DOCKER_USERNAME/IMAGE_NAME:latest
#
#      - name: Docker Login
#        env:
#          DOCKER_USERNAME: vadlamudirajesh
#          DOCKER_PASSWORD: Nandini@9701
#        run: echo docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD
#
#      - name: Docker Publish
#        env:
#          DOCKER_REGISTRY:  docker.io
#          DOCKER_USERNAME: vadlamudirajesh
#          IMAGE_NAME: github-actions-nginx
#        run: echo docker push ${{env.DOCKER_REGISTRY}}/${{env.DOCKER_USERNAME}}/${{env.IMAGE_NAME}}:latest
#
#  deploy:
#    env:
#      CONTAINER_REGISTRY: docker.io
#      DOCKER_USERNAME: vadlamudirajesh
#      IMAGE_NAME: github-action-nginx
#    needs: docker
#    runs-on: ubuntu-latest
#    steps:
#      - name: Docker Run
#        run: docker run -d -p 8080:80 $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest


######################environment variables at workflow level########################

#name: Exploring variables and Secrets
#on:
#  push
#jobs:
#
#  docker:
#    env:
#      CONTAINER_REGISTRY: docker.io
#      DOCKER_USERNAME: vadlamudirajesh
#      IMAGE_NAME: github-actions-nginx
#    runs-on: ubuntu-latest
#    steps:
#      - name: Docker Build
#        run: docker build -t $CONTAINER_REGISTRY/$DOCKER_USERNAME/IMAGE_NAME:latest
#
#      - name: Docker Login
#        env:
#          DOCKER_USERNAME: vadlamudirajesh
#          DOCKER_PASSWORD: Nandini@9701
#        run: echo docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD
#
#      - name: Docker Publish
#        env:
#          DOCKER_REGISTRY:  docker.io
#          DOCKER_USERNAME: vadlamudirajesh
#          IMAGE_NAME: github-actions-nginx
#        run: echo docker push ${{env.DOCKER_REGISTRY}}/${{env.DOCKER_USERNAME}}/${{env.IMAGE_NAME}}:latest
#
#  deploy:
#    env:
#      CONTAINER_REGISTRY: docker.io
#      DOCKER_USERNAME: vadlamudirajesh
#      IMAGE_NAME: github-action-nginx
#    needs: docker
#    runs-on: ubuntu-latest
#    steps:
#      - name: Docker Run
#        run: docker run -d -p 8080:80 $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest

#######################################################################

# Build and push Docker image to GitHub Container Registry (ghcr.io) using GITHUB_TOKEN
on:
  push:
    branches: [ main ]

permissions:
  contents: read
  packages: write   # required to push to GHCR
  id-token: write

env:
  IMAGE_NAME: github-actions-nginx

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.set-output.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (for multi-platform)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry (ghcr)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest

      - name: Set job output (image)
        id: set-output
        run: |
          echo "image=ghcr.io/${GITHUB_REPOSITORY_OWNER}/${IMAGE_NAME}:latest" >> $GITHUB_OUTPUT
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Log in to GHCR for deploy job
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull and run image (runner-local test)
        env:
          IMAGE: ${{ needs.build-and-push.outputs.image }}
        run: |
          echo "Using image: $IMAGE"
          docker rm -f gha-nginx || true
          docker run -d --name gha-nginx -p 8080:80 $IMAGE
          sleep 2
          curl -f http://localhost:8080 || (echo "smoke test failed" && exit 1)
      - name: Cleanup
        if: always()
        run: docker rm -f gha-nginx || true