name: Exploring variables and Secrets

#on:
#  push
#jobs:
#  docker:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Docker Build
#        run: docker build -t docker.io/dockerUsername/imageName:latest
#
#      - name: Docker Login
#        run: docker login --username=vadlamudirajesh --password=lkkdj@SsoWd
#
#      - name: Docker Publish
#        run: docker push docker.io/vadlamudirajesh/imageName:latest
#
#  deploy:
#    needs: docker
#    runs-on: ubuntu-latest
#    steps:
#      - name: Docker Run
#        run: docker run -d -p 8080:80 docker.io/dockerUsername/imageName:latest


#############environment variables at STEP level ########################

#  docker:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Docker Build
#        env:
#          CONTAINER_REGISTRY: docker.io
#          DOCKER_USERNAME:   vadlamudirajesh
#          IMAGE_NAME: github-actions-nginx
#        run: echo docker build -t $CONTAINER_REGISTRY/$DOCKER_USERNAME/IMAGE_NAME:latest
#
#      - name: Docker Login
#        env:
#          DOCKER_USERNAME:  vadlamudirajesh
#          DOCKER_PASSWORD: Nandini@9701
#        run: echo docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD
#
#      - name: Docker Publish
#        env:
#          DOCKER_REGISTRY:  docker.io
#          DOCKER_USERNAME:  vadlamudirajesh
#          IMAGE_NAME: github-actions-nginx
#        run: echo docker push ${{env.DOCKER_REGISTRY}}/${{env.DOCKER_USERNAME}}/${{env.IMAGE_NAME}}:latest
#
#  deploy:
#    needs: docker
#    runs-on: ubuntu-latest
#    steps:
#      - name: Docker Run
#        env:
#          CONTAINER_REGISTRY: docker.io
#          DOCKER_USERNAME:  vadlamudirajesh
#          IMAGE_NAME: github-action-nginx
#        run: docker run -d -p 8080:80 $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest


####################### environment variables at Job level ###############################
#
#  docker:
#    env:
#      CONTAINER_REGISTRY: docker.io
#      DOCKER_USERNAME: vadlamudirajesh
#      IMAGE_NAME: github-actions-nginx
#    runs-on: ubuntu-latest
#    steps:
#      - name: Docker Build
#        run: docker build -t $CONTAINER_REGISTRY/$DOCKER_USERNAME/IMAGE_NAME:latest
#
#      - name: Docker Login
#        env:
#          DOCKER_USERNAME: vadlamudirajesh
#          DOCKER_PASSWORD: Nandini@9701
#        run: echo docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD
#
#      - name: Docker Publish
#        env:
#          DOCKER_REGISTRY:  docker.io
#          DOCKER_USERNAME: vadlamudirajesh
#          IMAGE_NAME: github-actions-nginx
#        run: echo docker push ${{env.DOCKER_REGISTRY}}/${{env.DOCKER_USERNAME}}/${{env.IMAGE_NAME}}:latest
#
#  deploy:
#    env:
#      CONTAINER_REGISTRY: docker.io
#      DOCKER_USERNAME: vadlamudirajesh
#      IMAGE_NAME: github-action-nginx
#    needs: docker
#    runs-on: ubuntu-latest
#    steps:
#      - name: Docker Run
#        run: docker run -d -p 8080:80 $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest


######################environment variables at workflow level########################

#name: Exploring variables and Secrets
#on:
#  push
#jobs:
#
#  docker:
#    env:
#      CONTAINER_REGISTRY: docker.io
#      DOCKER_USERNAME: vadlamudirajesh
#      IMAGE_NAME: github-actions-nginx
#    runs-on: ubuntu-latest
#    steps:
#      - name: Docker Build
#        run: docker build -t $CONTAINER_REGISTRY/$DOCKER_USERNAME/IMAGE_NAME:latest
#
#      - name: Docker Login
#        env:
#          DOCKER_USERNAME: vadlamudirajesh
#          DOCKER_PASSWORD: Nandini@9701
#        run: echo docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD
#
#      - name: Docker Publish
#        env:
#          DOCKER_REGISTRY:  docker.io
#          DOCKER_USERNAME: vadlamudirajesh
#          IMAGE_NAME: github-actions-nginx
#        run: echo docker push ${{env.DOCKER_REGISTRY}}/${{env.DOCKER_USERNAME}}/${{env.IMAGE_NAME}}:latest
#
#  deploy:
#    env:
#      CONTAINER_REGISTRY: docker.io
#      DOCKER_USERNAME: vadlamudirajesh
#      IMAGE_NAME: github-action-nginx
#    needs: docker
#    runs-on: ubuntu-latest
#    steps:
#      - name: Docker Run
#        run: docker run -d -p 8080:80 $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest

#######################################################################

# Build and push Docker image to GitHub Container Registry (ghcr.io) using GITHUB_TOKEN

# CI: build Spring Boot jar (Maven), upload artifact, download artifact, build & push image to GHCR
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write
  id-token: write

env:
  IMAGE_NAME: springboot-app

jobs:
  build:
    name: Build and package (Maven)
    runs-on: ubuntu-latest
    outputs:
      jar-path: ${{ steps.set-jar.outputs.jar_path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Build and run tests
        run: mvn -B clean verify

      - name: Package (skip tests for packaging step)
        run: mvn -B package -DskipTests

      - name: Prepare deploy folder and copy jar
        run: |
          mkdir -p deploy
          JAR=$(ls target/*.jar | head -n 1 || true)
          echo "Found jar: $JAR"
          if [ -z "$JAR" ]; then
            echo "ERROR: No jar found in target/ â€” failing the job"
            ls -la target || true
            exit 1
          fi
          cp "$JAR" deploy/app.jar
          ls -la deploy

      - name: Upload jar artifact
        uses: actions/upload-artifact@v4
        with:
          name: springboot-jar
          path: deploy/app.jar

      - name: Set job output (jar path)
        id: set-jar
        run: echo "jar_path=deploy/app.jar" >> $GITHUB_OUTPUT

  docker:
    name: Build & push Docker image to GHCR
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download built jar
        uses: actions/download-artifact@v4
        with:
          name: springboot-jar       # MUST match the upload name above
          path: ./deploy

      - name: Confirm deploy contents (debug)
        run: |
          echo "PWD=$(pwd)"
          echo "Root listing:"
          ls -la
          echo "deploy listing (should contain app.jar):"
          ls -la deploy || true
          echo "Find files:"
          find . -maxdepth 4 -type f -print

      - name: Set up QEMU (for buildx)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Print pushed image (non-secret)
        run: echo "Pushed ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest"